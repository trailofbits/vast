#
# Copyright (c) 2021-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

name: Build Matrix

on:
  push:
    branches:
      - 'master'
      - 'visitor-api'

    tags:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
          name: 'ubuntu',
          os: ubuntu-20.04,
          arch: 'x86_64-linux-gnu-ubuntu-18.04',
        }

        - {
          name: 'macos',
          os: macos-latest,
          arch: 'x86_64-apple-darwin'
        }
        llvm: [ '13.0.1' ]

    timeout-minutes: 20

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          build_path="build"
          source_path="src"
          install_path="install"
          downloads_path="downloads"
          ccache_path="ccache"
          package_path="package"

          mkdir -p ${source_path} \
            ${install_path} \
            ${build_path} \
            ${downloads_path} \
            ${ccache_path}

          echo ::set-output name=source::$(pwd)/${source_path}
          echo ::set-output name=install::$(pwd)/${install_path}
          echo ::set-output name=build::$(pwd)/${build_path}
          echo ::set-output name=downloads::$(pwd)/${downloads_path}
          echo ::set-output name=ccache::$(pwd)/${ccache_path}
          echo ::set-output name=package::$(pwd)/${package_path}

      - name: Update the cache (downloads)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.downloads }}

          key: |
            gitmodules_${{ matrix.config.os }}_${{ matrix.llvm }}_${{ github.sha }}
          restore-keys: |
            gitmodules_${{ matrix.config.os }}_${{ matrix.llvm }}

      - name: Update the cache (ccache)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.ccache }}

          key: |
            gitmodules_${{ matrix.config.os }}_${{ matrix.llvm }}_${{ github.sha }}
          restore-keys: |
            gitmodules_${{ matrix.config.os }}_${{ matrix.llvm }}

      - name: Install linux build requirements
        if: ${{ matrix.config.name == 'ubuntu' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            software-properties-common tar wget libncurses5 \
            clang-12 cmake ninja-build python3-pip

      - name: Install macos build requirements
        if: ${{ matrix.config.name == 'macos' }}
        shell: bash
        run: |
          brew install ninja cmake python3

      - name: Clone the vast repository
        uses: actions/checkout@v3
        with:
          path: ${{ steps.build_paths.outputs.source }}/vast
          fetch-depth: 0

      - name: Install vast test requirements
        shell: bash
        run: |
          sudo pip3 install lit

      - name: Download llvm ${{ matrix.llvm }} package
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.downloads }}
        run: |
          llvm_archive="clang+llvm-${{ matrix.llvm }}-${{ matrix.config.arch }}.tar.xz"
          llvm_url_path="https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.llvm }}/${llvm_archive}"

          if [[ ! -f "${llvm_archive}" ]] ; then
            echo "Downloading: ${llvm_url_path}"
            wget "${llvm_url_path}"
          fi

          mkdir "${{ steps.build_paths.outputs.install }}/llvm"
          tar -xf "${llvm_archive}" -C "${{ steps.build_paths.outputs.install }}/llvm" --strip-components=1

      - name: Configure vast
        working-directory: ${{ steps.build_paths.outputs.build }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.ccache }}
          LLVM_INSTALL_DIR: "${{ steps.build_paths.outputs.install }}/llvm"
          VAST_INSTALL_DIR: "${{ steps.build_paths.outputs.install }}"

        run: |
          cmake -G Ninja -B ${{ steps.build_paths.outputs.build }} \
            -S ${{ steps.build_paths.outputs.source }}/vast \
            -DCMAKE_C_COMPILER=clang-12 \
            -DCMAKE_CXX_COMPILER=clang++-12 \
            -DLLVM_EXTERNAL_LIT=/usr/local/bin/lit \
            -DLLVM_INSTALL_DIR="$env{LLVM_INSTALL_DIR}" \
            -DENABLE_TESTING=ON \
            -DCMAKE_VERBOSE_MAKEFILE=True


      - name: Build vast
        working-directory: ${{ steps.build_paths.outputs.build }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.ccache}}

        run: |
          cmake --build  ${{ steps.build_paths.outputs.build }} --config Release

      - name: Run lit tests
        working-directory: ${{ steps.build_paths.outputs.build }}

        run: |
          cmake --build  ${{ steps.build_paths.outputs.build }} --target check-vast

