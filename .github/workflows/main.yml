#
# Copyright (c) 2021-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

name: Build

on:
  push:
    branches:
      - 'master'

    tags:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  build_linux:
    strategy:
      fail-fast: false
      matrix:
        image:
          - { name: 'ubuntu', tag: '20.04' }

        llvm: [ '12.0.1' ]

    runs-on: ubuntu-20.04

    timeout-minutes: 15

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="build"
          rel_source_path="src"
          rel_install_path="install"
          rel_downloads_path="downloads"
          rel_ccache_path="ccache"

          mkdir -p ${rel_build_path} \
                   ${rel_install_path} \
                   ${rel_downloads_path} \
                   ${rel_ccache_path}

          echo ::set-output name=SOURCE::$(pwd)/${rel_source_path}
          echo ::set-output name=REL_SOURCE::${rel_source_path}
          echo ::set-output name=BUILD::$(pwd)/${rel_build_path}
          echo ::set-output name=REL_BUILD::${rel_build_path}
          echo ::set-output name=INSTALL::$(pwd)/${rel_install_path}
          echo ::set-output name=DOWNLOADS::$(pwd)/${rel_downloads_path}
          echo ::set-output name=CCACHE::$(pwd)/${rel_ccache_path}

      - name: Update the cache (downloads)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ github.sha }}
          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}

      - name: Update the cache (ccache)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ github.sha }}
          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}

      - name: Install build requirements
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            software-properties-common tar wget \
            clang-12 libstdc++-10-dev cmake ninja-build python3-pip

      - name: Clone the vast repository
        uses: actions/checkout@v2
        with:
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/vast
          fetch-depth: 0

      - name: Install vast test requirements
        shell: bash
        run: |
          sudo pip install lit
          sudo ln -s /usr/bin/FileCheck-12 /usr/bin/FileCheck

      - name: Download the llvm ${{ matrix.llvm }} package
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
        run: |
          llvm_archive="clang+llvm-${{ matrix.llvm }}-x86_64-linux-gnu-ubuntu-16.04.tar.xz"
          llvm_url_path="https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.llvm }}/${llvm_archive}"

          if [[ ! -f "${llvm_archive}" ]] ; then
            echo "Downloading: ${llvm_url_path}"
            wget "${llvm_url_path}"
          fi

          mkdir "${{ steps.build_paths.outputs.INSTALL }}/llvm"
          tar -xf "${llvm_archive}" -C "${{ steps.build_paths.outputs.INSTALL }}/llvm" --strip-components=1

      - name: Configure vast
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          llvm_dir="${{ steps.build_paths.outputs.INSTALL }}/llvm"

          cmake -G Ninja -B build \
            -S ${{ steps.build_paths.outputs.SOURCE }}/vast \
            -DCMAKE_C_COMPILER=clang-12 \
            -DCMAKE_CXX_COMPILER=clang++-12 \
            -DCMAKE_VERBOSE_MAKEFILE=True \
            -DENABLE_TESTING=ON \
            -DLLVM_EXTERNAL_LIT=/usr/local/bin/lit \
            -DLLVM_INSTALL_DIR=${llvm_dir}

      - name: Build vast
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build build -j $(nproc)

      - name: Install vast
        id: vast_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/vast
          cmake --build build \
                --target install
          echo ::set-output name=PATH::${DESTDIR}

      - name: Run lit tests
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        run: |
          export LLVM_SYMBOLIZER_PATH="${{ steps.build_paths.outputs.INSTALL }}/llvm/bin/llvm-symbolizer"
          cmake --build build --target check-vast
