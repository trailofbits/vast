// Copyright (c) 2024-present, Trail of Bits, Inc.

#ifndef VAST_INTERFACES_AST_DECL_INTERFACE
#define VAST_INTERFACES_AST_DECL_INTERFACE

include "mlir/IR/OpBase.td"
include "vast/Interfaces/Common.td"

def ASTTagDeclInterface : VastOpInterface< "ASTTagDeclInterface" > {
    let description = [{
        Inteface for clang's TagDecl AST node.
    }];

    let methods = [

    ];
}

def ASTDeclInterface : VastOpInterface< "ASTDeclInterface" > {
    let description = [{
        Interface for clang's Decl AST node.
    }];

    let methods = [
        InterfaceMethod< [{ Inditaces whether the declaration was implicitly
                            generated by the implementation. If false, this
                            declaration was written explicitly in the source code. }],
                        "bool", "isImplicit", (ins) >,

        InterfaceMethod< "", "void", "getDeclContext", (ins) >
    ];
}

def ASTNamedDeclInterface : VastOpInterface< "ASTNamedDeclInterface",
    [ASTDeclInterface] > {

    let description = [{
        Interface for clang's NamedDecl AST node.
    }];

    let methods = [];
}

def ASTValueDeclInterface : VastOpInterface< "ASTValueDeclInterface",
    [ASTNamedDeclInterface] > {

    let description = [{
        Interface for clang's ValueDecl AST node.
    }];

    let methods = [
        InterfaceMethod< "", "void", "getType", (ins) >
    ];
}

def ASTDeclaratorDeclInterface : VastOpInterface< "ASTDeclaratorDeclInterface",
    [ASTValueDeclInterface] > {
    
    let description = [{
        Interface for clang's DeclaratorDecl AST node.
    }];

    let methods = [];
}

def ASTFieldDeclInterface : VastOpInterface< "ASTFieldDeclInterface",
    [ASTDeclaratorDeclInterface] > {
    let description = [{
        Interface for clang's FieldDecl AST node.
    }];

    let methods = [
        InterfaceMethod< "Determines whether this is an unnamed bitfield",
        "bool", "isUnnamedBitField", (ins) >,

        InterfaceMethod< [{ Determine if this field is a subobject of zero size,
                            that is, either a zero-lenght bit-field or a field
                            of empty class type with the [[no_unique_address]]
                            attribute. }], "bool", "isZeroSize", (ins) >,

        InterfaceMethod< "Return ASTContext.", "void", "getASTContext", (ins) >,
    ];
}

def ASTVarDeclInterface : VastOpInterface< "ASTVarDeclInterface",
    [ASTDeclaratorDeclInterface] > {
    let description = [{
        Interface for clang's VarDecl AST node.
    }];

    let methods = [
        InterfaceMethod< [{ Returns true for local variable declarations other than
                            parameters. Note that this includes static variables 
                            inside of a functions. It also includes variables inside
                            blocks.

                            void foo() { int x; static int y, extern int z; } }],
                         "bool", "isLocalVarDecl", (ins) >,

        InterfaceMethod< [{ Returns true for all variables that do not have local
                            storage. This includes all global variables as well as
                            static variables declared within a fuctnion }], "bool",
                         "hasGlobalStorage", (ins) >,

        InterfaceMethod< [{ Determine whether this variable is the exception
                            variable in a C++ catch statement or an Objectinve-C
                            \@catch statement }], "bool", "isExceptionVariable", (ins) >,

        InterfaceMethod< [{ Whether this variabla is the implicit variable for
                            a lambda init-capture. }], "bool", "isInitCapture", (ins) >,

        InterfaceMethod< "Should return Expr *", "void", "getInit", (ins) >
    ];
}

def ASTRecordDeclInterface : VastOpInterface< "ASTRecordDeclInterface",
    [ASTTagDeclInterface] > {
    let description = [{
       Interface for clang's RecordDecl AST node.
    }];

    let methods = [
        InterfaceMethod< "<description>", "std::vector< vast::ASTFieldDeclInterface >",
        "fields", (ins) >
    ];
}


#endif // VAST_INTERFACES_AST_DECL_INTERFACE
